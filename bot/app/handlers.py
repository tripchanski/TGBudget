import aiohttp, logging, openpyxl # type: ignore

from aiogram import types, F, Router  # type: ignore
from aiogram.filters import Command # type: ignore
from aiogram.fsm.context import FSMContext # type: ignore
from aiogram.fsm.state import State, StatesGroup # type: ignore
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message # type: ignore
from datetime import datetime
from io import BytesIO


API_URL = "http://api:8000"
router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ExpensesGet(StatesGroup):
    waiting_for_title = State()
    waiting_for_date = State()
    waiting_for_amount = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()

class ExpensesDelete(StatesGroup):
    waiting_for_id = State()

class ExpensesEdit(StatesGroup):
    waiting_for_id = State()
    waiting_for_title = State()
    waiting_for_amount = State()


menu = ReplyKeyboardMarkup( keyboard = [
    [
        KeyboardButton(text = 'üìù –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –≤–∏—Ç—Ä–∞—Ç üìù'),
        KeyboardButton(text = 'üóÉ –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –≤–∏—Ç—Ä–∞—Ç üóÉ'),
    ],
    [
        KeyboardButton(text = 'üü• –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é —É —Å–ø–∏—Å–∫—É –≤–∏—Ç—Ä–∞—Ç üü•'),
        KeyboardButton(text = 'üñä –í—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é —É —Å–ø–∏—Å–∫—É –≤–∏—Ç—Ä–∞—Ç üñä'),
    ]
    ] ,resize_keyboard=True
)

infos = {}


@router.message(Command('start'))
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é.', reply_markup = menu)

# ================== Add Expenses ==================

@router.message(F.text == 'üìù –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –≤–∏—Ç—Ä–∞—Ç üìù')
async def add_Expenses(message: Message, state: FSMContext):
    infos[message.from_user.id] = {}
    await state.set_state(ExpensesGet.waiting_for_title)
    await message.answer('‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Å—Ç–∞—Ç—Ç—ñ –≤–∏—Ç—Ä–∞—Ç:')

@router.message(ExpensesGet.waiting_for_title)
async def waiting_for_title(message: Message, state: FSMContext):
    info = infos[message.from_user.id]
    info['title'] = str(message.text)
    await state.set_state(ExpensesGet.waiting_for_date)
    await message.answer('üóì –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤–∏—Ç—Ä–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY:')

@router.message(ExpensesGet.waiting_for_date)
async def waiting_for_date(message: Message, state: FSMContext):
    info = infos[message.from_user.id]
    try:
        parsed_date = datetime.strptime(message.text, '%d.%m.%Y').date()
        info['date'] = parsed_date
        info['date'] = str(message.text)
        await state.set_state(ExpensesGet.waiting_for_amount)
        await message.answer('üí≥ –í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç —É –≥—Ä–Ω:')
    except ValueError:
        await message.answer('''
                             ‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞.\n\nüóì –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤–∏—Ç—Ä–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY:
                             ''')
        await state.set_state(ExpensesGet.waiting_for_date)

@router.message(ExpensesGet.waiting_for_amount)
async def waiting_for_amount(message: Message, state: FSMContext):
    info = infos[message.from_user.id]
    try:
        info['amount'] = float(message.text)
        async with aiohttp.ClientSession() as session:
            async with session.post(f'{API_URL}/expenses/', json=info) as response:
                if response.status == 200:
                    await message.answer(f'''
                        ‚úÖ –°—Ç–∞—Ç—Ç—è –≤–∏—Ç—Ä–∞—Ç –¥–æ–¥–∞–Ω–∞:\n\n ‚úèÔ∏è {info['title']},\n üóì {info['date']},\n üí≥ {info['amount']} –≥—Ä–Ω.
                        ''', reply_markup = menu)
                else:
                    await message.answer('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ –≤–∏—Ç—Ä–∞—Ç.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup = menu)
        del info
        await state.clear()
    except ValueError:
        await message.answer('''
                             ‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∞ —Å—É–º–∞.\n\nüí≥ –í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç —É –≥—Ä–Ω:
                             ''')
        await state.set_state(ExpensesGet.waiting_for_amount)

# ================== Get Expenses ==================

@router.message(F.text == 'üóÉ –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –≤–∏—Ç—Ä–∞—Ç üóÉ')
async def get_Expenses(message: Message, state: FSMContext):
    infos[message.from_user.id] = {}
    await state.set_state(ExpensesGet.waiting_for_start_date)
    await message.answer('üóì –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY:')

@router.message(ExpensesGet.waiting_for_start_date)
async def waiting_for_start_date(message: Message, state: FSMContext):
    info = infos[message.from_user.id]
    try:
        parsed_date = datetime.strptime(message.text, '%d.%m.%Y').date()
        info['start_date'] = parsed_date
        info['start_date'] = str(message.text)
        await message.answer('üóì –í–≤–µ–¥–∏ –¥–∞—Ç—É –∫—ñ–Ω—Ü—è –≤ —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY:')
        await state.set_state(ExpensesGet.waiting_for_end_date)
    except ValueError:
        await message.answer('''
                             ‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞.\n\nüóì –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY:
                             ''')
        await state.set_state(ExpensesGet.waiting_for_start_date)

@router.message(ExpensesGet.waiting_for_end_date)
async def waiting_for_end_date(message: Message, state: FSMContext):
    info = infos[message.from_user.id]
    try:
        parsed_date = datetime.strptime(message.text, '%d.%m.%Y').date()
        info['end_date'] = parsed_date
        info['end_date'] = str(message.text)
        await message.answer('‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, —Ñ–æ—Ä–º—É—î—Ç—å—Å—è –∑–≤—ñ—Ç...')
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{API_URL}/expenses/', json=info) as response:
                if response.status == 200:
                    expenses = await response.json()
                    wb = openpyxl.Workbook()
                    ws = wb.active
                    ws.append(['ID','–ù–∞–∑–≤–∞', '–î–∞—Ç–∞', '–°—É–º–∞ (–≥—Ä–Ω)', '–°—É–º–∞ (USD)']) # type: ignore

                    total_expenses = 0
                    for expense in expenses['context']:
                        ws.append([expense['id'], expense['title'], expense['date'], expense['amount_uah'], expense['amount_usd']]) # type: ignore
                        total_expenses += expense['amount_uah']

                    file_stream = BytesIO()
                    wb.save(file_stream)
                    file_stream.seek(0)

                    await message.answer_document(types.BufferedInputFile(file_stream.getvalue(), filename='expenses_report.xlsx'))
                    await message.answer(f'‚úÖ –ó–≤—ñ—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! \n\nü™ô –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ {total_expenses}', reply_markup = menu)

                elif response.status == 404:
                    await message.answer('ü™ß –ó–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∏—Ç—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
                else:
                    await message.answer('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup = menu)
        del info
        await state.clear()
    except ValueError:
        await message.answer('''
                             ‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞.\n\nüóì –í–≤–µ–¥–∏ –¥–∞—Ç—É –∫—ñ–Ω—Ü—è –≤ —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY:
                             ''')
        await state.set_state(ExpensesGet.waiting_for_end_date)

# ================== Delete Expense ==================

@router.message(F.text == 'üü• –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é —É —Å–ø–∏—Å–∫—É –≤–∏—Ç—Ä–∞—Ç üü•')
async def delete_Expenses(message: Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        async with session.get(f'{API_URL}/all_expenses/') as response:
            if response.status == 200:
                expenses = await response.json()

                wb = openpyxl.Workbook()
                ws = wb.active
                ws.append(['ID','–ù–∞–∑–≤–∞', '–î–∞—Ç–∞', '–°—É–º–∞ (–≥—Ä–Ω)', '–°—É–º–∞ (USD)']) # type: ignore

                for expense in expenses['context']:
                    ws.append([expense['id'], expense['title'], expense['date'], expense['amount_uah'], expense['amount_usd']]) # type: ignore

                file_stream = BytesIO()
                wb.save(file_stream)
                file_stream.seek(0)

                await message.answer_document(types.BufferedInputFile(file_stream.getvalue(), filename='expenses_report.xlsx'))
            elif response.status == 404:
                await message.answer('ü™ß –ó–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∏—Ç—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
            else:
                await message.answer('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup = menu)
                await state.clear()
    await message.answer('üè∑ –í–≤–µ–¥–∏ ID —Å—Ç–∞—Ç—Ç—ñ –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:')
    await state.set_state(ExpensesDelete.waiting_for_id)

@router.message(ExpensesDelete.waiting_for_id)
async def waiting_for_id(message: Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        async with session.delete(f'{API_URL}/expenses/{message.text}') as response:
            if response.status == 200:
                await message.answer('‚úÖ –°—Ç–∞—Ç—Ç—é –≤–∏—Ç—Ä–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–æ!', reply_markup = menu)
            else:
                await message.answer('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ –≤–∏—Ç—Ä–∞—Ç.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.' , reply_markup = menu)
    await state.clear()

# ================== Edit Expense ==================

@router.message(F.text == 'üñä –í—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é —É —Å–ø–∏—Å–∫—É –≤–∏—Ç—Ä–∞—Ç üñä')
async def edit_Expenses(message: Message, state: FSMContext):
    infos[message.from_user.id] = {}
    async with aiohttp.ClientSession() as session:
        async with session.get(f'{API_URL}/all_expenses/') as response:
            if response.status == 200:
                expenses = await response.json()
                wb = openpyxl.Workbook()
                ws = wb.active
                ws.append(['ID','–ù–∞–∑–≤–∞', '–î–∞—Ç–∞', '–°—É–º–∞ (–≥—Ä–Ω)', '–°—É–º–∞ (USD)']) # type: ignore

                for expense in expenses['context']:
                    ws.append([expense['id'], expense['title'], expense['date'], expense['amount_uah'], expense['amount_usd']]) # type: ignore

                file_stream = BytesIO()
                wb.save(file_stream)
                file_stream.seek(0)

                await message.answer_document(types.BufferedInputFile(file_stream.getvalue(), filename="expenses_report.xlsx"))
            elif response.status == 404:
                await message.answer('ü™ß –ó–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∏—Ç—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
            else:
                await message.answer('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup = menu)
                await state.clear()
    await message.answer('üè∑ –í–≤–µ–¥–∏ ID —Å—Ç–∞—Ç—Ç—ñ –≤–∏—Ç—Ä–∞—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:')
    await state.set_state(ExpensesEdit.waiting_for_id)

@router.message(ExpensesEdit.waiting_for_id)
async def waiting_for_edit_id(message: Message, state: FSMContext):
    info = infos[message.from_user.id]
    try:
        info['id'] = int(message.text)
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{API_URL}/expenses/{message.text}', json=info) as response:
                if response.status == 200:
                    expenses = await response.json()
                    expense = expenses['context']
                    await message.answer(f'''
                        üìã –í–∏–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—Ç—è –≤–∏—Ç—Ä–∞—Ç:\n\n ‚úèÔ∏è {expense['title']},\n üóì {expense['date']},\n üí≥ {expense['amount_uah']} –≥—Ä–Ω.,\n üíµ {expense['amount_usd']} $.
                        ''')
                    await message.answer('‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–∞–∑–≤—É —Å—Ç–∞—Ç—Ç—ñ –≤–∏—Ç—Ä–∞—Ç:')
                    await state.set_state(ExpensesEdit.waiting_for_title)
                else:
                    await message.answer('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ –≤–∏—Ç—Ä–∞—Ç.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup = menu)
                    del info
                    await state.clear()
    except ValueError:
        await message.answer('''
                             ‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–µ ID.\n\nüè∑ –í–≤–µ–¥–∏ ID —Å—Ç–∞—Ç—Ç—ñ –≤–∏—Ç—Ä–∞—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:
                             ''')
        await state.set_state(ExpensesEdit.waiting_for_id)

@router.message(ExpensesEdit.waiting_for_title)
async def waiting_for_edit_title(message: Message, state: FSMContext):
    info = infos[message.from_user.id]
    info['title'] = str(message.text)
    await message.answer('–í–≤–µ–¥–∏ –Ω–æ–≤—É —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç —É –≥—Ä–∏–≤–Ω—è—Ö:')
    await state.set_state(ExpensesEdit.waiting_for_amount)

@router.message(ExpensesEdit.waiting_for_amount)
async def waiting_for_edit_amount(message: Message, state: FSMContext):
    info = infos[message.from_user.id]
    info['amount'] = float(message.text)
    async with aiohttp.ClientSession() as session:
        async with session.put(f'{API_URL}/expenses/{info["id"]}', json=info) as response:
            if response.status == 200:
                await message.answer('‚úÖ –°—Ç–∞—Ç—Ç—é –≤–∏—Ç—Ä–∞—Ç –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ!', reply_markup = menu)
            else:
                await message.answer('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ –≤–∏—Ç—Ä–∞—Ç.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', reply_markup = menu)
    await state.clear()
    del info
